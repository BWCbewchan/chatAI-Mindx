import { GoogleGenAI } from "@google/genai";
import { Router } from "express";
import multer from "multer";
import { analyzeSb3 } from "../sb3Analyzer.js";

export default function createUploadRouter({ apiKey, model, persona, maxUploadSizeMb }) {
  const router = Router();

  if (!apiKey) {
    console.warn("GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Upload API s·∫Ω ch·ªâ tr·∫£ v·ªÅ b√°o c√°o k·ªπ thu·∫≠t.");
  }

  const upload = multer({
    storage: multer.memoryStorage(),
    limits: { fileSize: maxUploadSizeMb * 1024 * 1024 },
    fileFilter: (_req, file, cb) => {
      if (!file.originalname.toLowerCase().endsWith(".sb3")) {
        return cb(new Error("Ch·ªâ ch·∫•p nh·∫≠n t·ªáp Scratch .sb3"));
      }
      cb(null, true);
    }
  });

  const genAI = apiKey ? new GoogleGenAI({ apiKey }) : null;

  router.post("/", upload.single("file"), async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ error: "Vui l√≤ng t·∫£i l√™n t·ªáp .sb3." });
      }

      const { summary, textReport } = await analyzeSb3(req.file.buffer);

      let aiFeedback = null;
      if (genAI) {
        const prompt = `H·ªçc sinh v·ª´a t·∫£i l√™n d·ª± √°n Scratch v√† ƒë√¢y l√† b√°o c√°o t·ª± ƒë·ªông:\n${textReport}\n\nH√£y ph·∫£n h·ªìi chi ti·∫øt (t·ªëi ƒëa 220 t·ª´) d√†nh cho h·ªçc sinh c·∫•p 1-2.\nY√™u c·∫ßu tr√¨nh b√†y:\n- D√πng Markdown r√µ r√†ng, m·ªü ƒë·∫ßu b·∫±ng ti√™u ƒë·ªÅ c·∫•p 2 (##) c√≥ emoji ch√†o h·ªèi.\n- Chia th√†nh c√°c m·ª•c c·∫•p 3 v·ªõi ti√™u ƒë·ªÅ: "üéØ ƒêi·ªÉm ƒë√£ l√†m t·ªët", "üõ†Ô∏è C·∫ßn ch·ªânh s·ª≠a", "üéí B√†i t·∫≠p luy·ªán th√™m".\n- N√™u t√™n kh·ªëi Scratch trong d·∫•u \`\` theo d·∫°ng "Nh√≥m > T√™n kh·ªëi".\n- L√†m n·ªïi b·∫≠t t·ª´ kh√≥a b·∫±ng **ch·ªØ in ƒë·∫≠m** v√† d√πng blockquote "> üí°" cho m·∫πo nh·ªè.\n- K·∫øt th√∫c b·∫±ng m·ª•c "‚ùìH·ªèi l·∫°i c√¥" v·ªõi 1 c√¢u h·ªèi g·ª£i m·ªü.`;
        const result = await genAI.models.generateContent({
          model,
          systemInstruction: persona,
          contents: [
            {
              role: "user",
              parts: [{ text: prompt }]
            }
          ]
        });
        const responseTextRaw = result?.text;
        aiFeedback =
          typeof responseTextRaw === "function" ? responseTextRaw() : responseTextRaw ?? null;
      }

      res.json({
        summary,
        report: textReport,
        aiFeedback
      });
    } catch (error) {
      console.error("L·ªói ph√¢n t√≠ch sb3:", error);
      res.status(400).json({ error: error.message || "Kh√¥ng th·ªÉ x·ª≠ l√Ω t·ªáp .sb3" });
    }
  });

  return router;
}
